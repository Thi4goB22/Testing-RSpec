"Ejercicio 1"

require 'rails_helper' 	
RSpec.describe User, type: :model do 
  it "Ingrese un nombre y un email" do
    user = User.new(name: "Luis", emaail: "Luis@algo.com")
    expect(user).to be_valid
  end
  it "No se puede identificar sin un nombre" do
    user = User.new(name: null, email: "Luis@algo.com")
    expect(user).not_to be_valid 
  end
   it "no se puede identificar sin un email" do
    user = User.new(name: "Luis", email: null)
    expect(user).not_to be_valid
  end
  it "acceso denegado con un email duplicado" do
    User.create!(name: "Test", email: "Luis@algo.com")
    expect(User.count).to eq(1) 
    user = User.new(name: "Jose", email: "Luis@algo.com")
    expect(user).not_to be_valid
  end
 end

"Ejercicio 2"
require 'rails_helper'
RSpec.describe TasksController, type: :controller do
  let(:valid_attributes) { { title: "primera tarea", completed: false } }
    describe "GET #index" do 
    it "devuelve una respuesta" do
      get :index 
      expect(response).to be_successful  
    end
  end
  describe "POST #create" do
    context "Ingresar atributos válidos" do  
      it "Crea una nueva Tarea" do
        expect {
          post :create, params: { task: valid_attributes } 
        }.to change(Task, :count).by(1)  
end
      it "redirige a la lista de tareas" do
        post :create, params: { task: valid_attributes }
        expect(response).to redirect_to(tasks_path)
      end
    end
    context "con atributos no válidos" do
      it "no crea una nueva tarea" do
        expect {
          post :create, params: { task: invalid_attributes }
        }.not_to change(Task, :count)
      end
      it "crear archivo de tareas" do
        post :create, params: { task: invalid_attributes }
        expect(response).to render_template(:new)
      end
    end
  end
end


"ejercicio 3"

require 'rails_helper'
RSpec.describe Article, type: :model do
  it "Tags" do
    article = Article.create!(title: "crear artículo", body: "cuerpo del artículo")
    tag1 = Tag.create!(name: "Rails")
    tag2 = Tag.create!(name: "Testing")
    article.tags << [tag1, tag2]
    expect(article.tags).to include(tag1, tag2)
  end
end

"ejercicio 4"

require 'rails_helper'
RSpec.feature "crear tarea", type: :feature do
  scenario "creando tarea" do
    visit new_task_path
    fill_in "Título", with: "nueva tarea"
    click_button "crear Tarea"


    expect(page).to have_text("tarea creada")
    expect(page).to have_text("crear tarea")
  end
end

"ejercicio 5"

require 'rails_helper'
RSpec.describe User, type: :model do
  it "ingresar email valido" do
    user = User.new(name: "Luis", email: "Luis@algo.com")
    expect(user).to be_valid
  end
  it "no ingresar un email sin estar valido" do
    user = User.new(name: "Luis", email: "Luis@otroemailvalido.com")
    expect(user).noot_to be_valid
  end
end

